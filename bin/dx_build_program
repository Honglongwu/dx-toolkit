#!/usr/bin/env python

import logging
logging.basicConfig(level=logging.DEBUG)
logging.getLogger('requests.packages.urllib3.connectionpool').setLevel(logging.ERROR)

import os, sys, json, fileinput, re
from optparse import OptionParser
import dxpy, dxpy.program_builder

parser = OptionParser(usage="%prog [options] program_dir", description="Upload a DNAnexus program.")
parser.add_option("-f", "--overwrite", help="Overwrite existing program and app with same name", action='store_true', default=False)
parser.add_option("-a", "--create_app", help="Create an app from the program (requires dxapp.json to be present)", action='store_true', default=False)
parser.add_option("-p", "--destination_project", help="Insert the program into the project with the specified project ID.", default=None)
parser.add_option("--publish", help="Publish the app after it has been created.", action='store_true', default=False)
(opts, args) = parser.parse_args()

if len(args) != 1:
    parser.print_help()
    parser.error("Incorrect number of arguments")

src_dir = args[0]

if not os.path.isdir(src_dir):
    parser.error("%s is not a directory" % src_dir)

if not (os.path.exists(os.path.join(src_dir, "dxprogram")) or os.path.exists(os.path.join(src_dir, "dxprogram.json"))):
    parser.error("Directory %s does not contain dxprogram.json: not a valid DNAnexus program source directory" % src_dir)

if opts.create_app and not os.path.exists(os.path.join(src_dir, "dxapp.json")):
    parser.error("Directory %s does not contain dxapp.json: not a valid DNAnexus app source directory" % src_dir)

dxpy.program_builder.build(src_dir)
bundled_resources = dxpy.program_builder.upload_resources(src_dir)

program_id = dxpy.program_builder.upload_program(src_dir, bundled_resources, overwrite=opts.overwrite, project=opts.destination_project)

print >> sys.stderr, "Created program " + program_id + " successfully"

if opts.create_app:
    app_id = dxpy.program_builder.create_app(program_id, src_dir, publish=opts.publish, overwrite=opts.overwrite)

if opts.create_app:
    print >> sys.stderr, "Created app " + app_id + " successfully"
    print json.dumps(dxpy.api.appDescribe(app_id))
else:
    print json.dumps(dxpy.api.programDescribe(program_id))

#print json.dumps(dxpy.api.programGet(program_id))
