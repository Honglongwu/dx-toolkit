#!/usr/bin/env python

import os, sys, json, re
from optparse import OptionParser
import dxpy

parser = OptionParser("Usage: %prog sam_filename table_id chroms")
(opts, args) = parser.parse_args()
if len(args) != 3:
    parser.print_help()
    parser.error("Incorrect number of arguments")

sam_filename, table_id, chromosomes_id = args

chromosomes = dxpy.DXRecord(chromosomes_id).get_details()['chromosomes']

if chromosomes is None:
    raise Exception("Object %s has no chromosomes property" % chromosomes_id)
chrom_name2id = dict([(c[0], c[1]) for c in chromosomes])

# See http://samtools.sourceforge.net/SAM1.pdf
mappings_schema = [
    {"name": "QNAME", "type": "string"},
    {"name": "FLAG", "type": "int32"},
    {"name": "chr", "type": "string"}, # RNAME
    {"name": "start", "type": "int32"}, # POS
    {"name": "MAPQ", "type": "int32"},
    {"name": "CIGAR", "type": "string"},
    {"name": "RNEXT", "type": "string"},
    {"name": "PNEXT", "type": "int32"},
    {"name": "TLEN", "type": "int32"},
    {"name": "SEQ", "type": "string"},
    {"name": "QUAL", "type": "string"},
    {"name": "OPT", "type": "string"},
    {"name": "stop", "type": "int32"},
]

if table_id == "0":
    dxtable = dxpy.new_dxgtable(columns=mappings_schema) #, chr_col="chr", lo_col="start", hi_col="stop")
else:
    dxtable = dxpy.open_dxgtable(table_id)

with open(sam_filename, 'r') as sam_file:
    i = 0; table_rows = []
    for line in sam_file:
        # Ignore SAM header
        if line[0] == '@':
            continue
        sam_record = line.split("\t", 11)
        if len(sam_record) < 11:
            raise Exception("Unexpected number of entries in file %s, line %d" % (sam_filename, i))
        sam_record[-1] = sam_record[-1].rstrip()
        # Initialize OPT field, if empty
        if len(sam_record) == 11: sam_record.append('')
        for field in 1, 3, 4, 7, 8:
            sam_record[field] = int(sam_record[field])
        # Replace reference name with id
        try:
            sam_record[2] = str(chrom_name2id[sam_record[2]])
        except KeyError:
            if sam_record[2] == '*':
                continue
            else:
                raise Exception("Reference name %s not found in chrom info object %s" % (sam_record[2], chromosomes_id))
        
        al_len = 0
        cigar = re.split('(\d+)', sam_record[5])
        for p in range(len(cigar)):
            c = cigar[p]
            if c == 'M' or c == 'D' or c == 'N' or c == 'X' or c == 'P' or c == '=':
                al_len += int(cigar[p-1])
        
        rpos = int(sam_record[3]) + al_len
        sam_record.append(rpos)
        
        table_rows.append(sam_record)
        i += 1
        if i % 40000 == 0:
            dxtable.add_rows(table_rows)
            table_rows = []
    if len(table_rows) > 0:
        dxtable.add_rows(table_rows)
    dxtable.flush()
    print json.dumps({'table_id': dxtable.get_id()})
