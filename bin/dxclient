#!/usr/bin/env python

import sys, os
import argparse

import dxpy
import json

def write_env_var(var, value):
    with open(os.path.expanduser('~/.dnanexus/' + var), 'w') as fd:
        fd.write(value)

def load_env():
    for filename in os.listdir(os.path.expanduser('~/.dnanexus')):
        with open(os.path.expanduser('~/.dnanexus/'+filename), 'r') as fd:
            value = fd.read()
            # TODO: Find out how bad the line below is for Mac OS X.
            os.environ[filename] = value

# Loading environment

load_env()

def login(args):
    # TODO: Remove this and replace with actual logic and interaction
    # when implemented
    write_env_var('DX_SECURITY_CONTEXT',
                  '{"auth_token":"outside","auth_token_type":"Bearer"}')

def logout(args):
    write_env_var('DX_SECURITY_CONTEXT', '')

def set_host(args):
    write_env_var("DX_APISERVER_HOST", args.host)

def set_port(args):
    write_env_var("DX_APISERVER_PORT", args.port)

def set_project(args):
    write_env_var("DX_PROJECT_CONTEXT_ID", args.project)

def api(args):
    json_input = json.loads(args.json)
    if args.input is not None:
        with open(args.input, 'r') as fd:
            data = fd.read()
            json_input = json.loads(data)
    print json.dumps(dxpy.DXHTTPRequest('/' + args.resource + '/' + args.method,
                                        json_input))

def describe(args):
    json_input = {}
    if args.project is not None:
        json_input["project"] = args.project
    else:
        json_input["project"] = os.environ["DX_PROJECT_CONTEXT_ID"]
    if args.properties:
        json_input["properties"] = True
    if args.details:
        json_input["details"] = True

    desc = dxpy.DXHTTPRequest('/' + args.dxid + '/describe', json_input)
    if args.pretty:
        raise NotImplementedError()
    else:
        print json.dumps(desc)

def file_get(args):
    dxpy.download_dxfile(args.dxid, args.filename)

def file_put(args):
    print dxpy.upload_local_file(args.filename).get_id()

parser = argparse.ArgumentParser(description='DNAnexus Command-Line Client, API v1.0.0')
subparsers = parser.add_subparsers()

parser_login = subparsers.add_parser('login', help='Log in and acquire credentials', description='Log in interactively and acquire credentials')
parser_login.set_defaults(func=login)

parser_logout = subparsers.add_parser('logout', help='Log out and remove credentials', description='Log out and remove credentials')
parser_logout.set_defaults(func=logout)

parser_api = subparsers.add_parser('api', help='Make an API call')
parser_api.add_argument('resource', help='is one of \"system\", a class name (e.g. \"record\"), or an entity ID such as \"record-xxxx\"')
parser_api.add_argument('method', help='a valid method for the resource as documented by the API document')
parser_api.add_argument('json', nargs='?', default="{}", help='the JSON input for the method as documented by the API document (if not given, \"{}\" is used)')
parser_api.add_argument('--input', help='a filename containing the JSON input to be used (takes precedence over the \'json\' argument)')
parser_api.set_defaults(func=api)

parser_file = subparsers.add_parser('file', help='Interact with remote files')
subparsers_file = parser_file.add_subparsers()

parser_file_get = subparsers_file.add_parser('get', help='Download a file')
parser_file_get.add_argument('dxid', help='file ID to download')
parser_file_get.add_argument('filename', help='local filename to be saved')
parser_file_get.set_defaults(func=file_get)

parser_file_put = subparsers_file.add_parser('put', help='Upload a file')
parser_file_put.add_argument('filename', help='local filename to upload')
parser_file_put.set_defaults(func=file_put)

parser_set = subparsers.add_parser('set', help='Sets default values for communication with the API server',
                                   description='Sets default values for communication with the API server')
subparsers_set = parser_set.add_subparsers()

parser_set_host = subparsers_set.add_parser('host', help='Sets the API server hostname')
parser_set_host.add_argument('host', help='API server hostname')
parser_set_host.set_defaults(func=set_host)

parser_set_port = subparsers_set.add_parser('port', help='Sets the API server port number')
parser_set_port.add_argument('port', help='API server port number')
parser_set_port.set_defaults(func=set_port)

parser_set_project = subparsers_set.add_parser('project', help='Sets the default project ID')
parser_set_project.add_argument('project', help='Project ID')
parser_set_project.set_defaults(func=set_project)

parser_describe = subparsers.add_parser('describe', help='Describe a remote object', description='Describe a remote object')
parser_describe.add_argument('--project', help='Specify hint for which project to access, default is default project')
parser_describe.add_argument('--properties', help='Include properties', action='store_true')
parser_describe.add_argument('--details', help='Include details if available', action='store_true')
parser_describe.add_argument('--pretty', help='Display return value in a readable fashion', action='store_true')
parser_describe.add_argument('dxid', help='Object ID to describe')
parser_describe.set_defaults(func=describe)

args = parser.parse_args(sys.argv[1:])
args.func(args)
