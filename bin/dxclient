#!/usr/bin/env python

import sys, os, datetime
import argparse

import dxpy
import json

def write_env_var(var, value):
    try:
        os.mkdir(os.path.expanduser('~/.dnanexus-env/'))
    except:
        pass
    with open(os.path.expanduser('~/.dnanexus-env/' + var), 'w') as fd:
        fd.write(value)

def load_env():
    try:
        for filename in os.listdir(os.path.expanduser('~/.dnanexus-env')):
            with open(os.path.expanduser('~/.dnanexus-env/'+filename), 'r') as fd:
                value = fd.read()
                # TODO: Find out how bad the line below is for Mac OS X.
                os.environ[filename] = value
    except:
        pass

# Loading environment

load_env()

def login(args):
    # TODO: Remove this and replace with actual logic and interaction
    # when implemented
    write_env_var('DX_SECURITY_CONTEXT',
                  '{"auth_token":"outside","auth_token_type":"Bearer"}')

def logout(args):
    write_env_var('DX_SECURITY_CONTEXT', '')

def set_host(args):
    write_env_var("DX_APISERVER_HOST", args.host)

def set_port(args):
    write_env_var("DX_APISERVER_PORT", args.port)

def set_project(args):
    write_env_var("DX_PROJECT_CONTEXT_ID", args.project)

def api(args):
    json_input = json.loads(args.json)
    if args.input is not None:
        with open(args.input, 'r') as fd:
            data = fd.read()
            json_input = json.loads(data)
    print json.dumps(dxpy.DXHTTPRequest('/' + args.resource + '/' + args.method,
                                        json_input))

def ls(args):
    dxproj = dxpy.DXProject()
    resp = dxproj.list_folder(folder=args.folder, describe={})
    if not args.obj:
        for folder in resp["folders"]:
            print os.path.basename(folder) + '/'
    if not args.folders:
        for obj in resp["objects"]:
            if not args.all and obj['describe']['hidden']:
                continue
            if not args.name and not args.both:
                print obj['id']
            elif args.name and not args.both:
                print obj['describe']['name']
            else:
                print obj['id'] + '\t' + obj['describe']['name']

def mkdir(args):
    dxproj = dxpy.DXProject()
    if args.parents:
        try:
            dxproj.new_folder(folder=args.folder, parents=True)
        except dxpy.DXAPIError as inst:
            if inst.name != 'InvalidState':
                raise inst
    else:
        dxproj.new_folder(folder=args.folder)

def rmdir(args):
    dxproj = dxpy.DXProject()
    dxproj.remove_folder(folder=args.folder)

def rm(args):
    dxproj = dxpy.DXProject()
    dxproj.remove_objects(args.objects)

def describe(args):
    if args.dxid.startswith('job'):
        desc = dxpy.DXJob(args.dxid).describe()
        print json.dumps(desc)
        if not args.json:
            raise NotImplementedError()
    elif args.dxid.startswith('project'):
        desc = dxpy.DXProject(args.dxid).describe(oesirj) # get args!
        print json.dumps(desc)
        if not args.json:
            raise NotImplementedError()
    else:
        json_input = {}
        if args.project is not None:
            json_input["project"] = args.project
        else:
            json_input["project"] = os.environ["DX_PROJECT_CONTEXT_ID"]
        if args.properties:
            json_input["properties"] = True
        if args.details:
            json_input["details"] = True

        desc = dxpy.DXHTTPRequest('/' + args.dxid + '/describe', json_input)
        if args.json:
            print json.dumps(desc)
        else:
            # Must be a data object
            common_fields = ['id', 'class', 'project', 'folder', 'name', 'properties', 'tags', 'types',
                             'hidden', 'details', 'links', 'created', 'modified', 'state']
            print "ID\t\t" + desc["id"]
            print "Class\t\t" + desc["class"]
            folder_prefix = desc["folder"]
            if folder_prefix != "/":
                folder_prefix += "/"
            print "Location\t" + desc["project"] + ":" + folder_prefix + desc["name"]
            print "State\t\t" + desc["state"]
            print "Hidden\t\t" + json.dumps(desc["hidden"])
            print "Types\t\t" + json.dumps(desc["types"])
            if 'properties' in desc:
                print "Properties\t" + json.dumps(desc["properties"])
            print "Tags\t\t" + json.dumps(desc["tags"])
            if 'details' in desc:
                print "Details\t\t" + json.dumps(desc["details"])
            print "Outgoing links\t" + json.dumps(desc["links"])
            print "Created\t\t" + datetime.datetime.fromtimestamp(desc['created']/1000).ctime()
            print "Last modified\t" + datetime.datetime.fromtimestamp(desc['modified']/1000).ctime()

def file_get(args):
    filename = args.output
    if filename is None:
        try:
            filename = os.path.basename(dxpy.api.fileDescribe(args.dxid)['name'])
        except KeyError:
            filename = args.dxid
    dxpy.download_dxfile(args.dxid, filename)

def file_put(args):
    print dxpy.upload_local_file(args.filename).get_id()

def find_jobs(args):
    raise NotImplementedError()

parser = argparse.ArgumentParser(description='DNAnexus Command-Line Client, API v1.0.0')
subparsers = parser.add_subparsers()

parser_login = subparsers.add_parser('login', help='Log in and acquire credentials', description='Log in interactively and acquire credentials')
parser_login.set_defaults(func=login)

parser_logout = subparsers.add_parser('logout', help='Log out and remove credentials', description='Log out and remove credentials')
parser_logout.set_defaults(func=logout)

parser_api = subparsers.add_parser('api', help='Make an API call')
parser_api.add_argument('resource', help='is one of \"system\", a class name (e.g. \"record\"), or an entity ID such as \"record-xxxx\"')
parser_api.add_argument('method', help='a valid method for the resource as documented by the API document')
parser_api.add_argument('json', nargs='?', default="{}", help='the JSON input for the method as documented by the API document (if not given, \"{}\" is used)')
parser_api.add_argument('--input', help='a filename containing the JSON input to be used (takes precedence over the \'json\' argument)')
parser_api.set_defaults(func=api)

parser_ls = subparsers.add_parser('ls', help='List folders and objects in a folder',
                                  description='List folders and/or objects in a folder')
parser_ls.add_argument('-a', '--all', help='show hidden files', action='store_true')
parser_ls.add_argument('--name', help='show names instead of object IDs', action='store_true')
parser_ls.add_argument('--both', help='show both names and object IDs', action='store_true')
parser_ls.add_argument('--obj', help='show only objects', action='store_true')
parser_ls.add_argument('--folders', help='show only folders', action='store_true')
parser_ls.add_argument('folder', help='folder to list, default is \"/\"', nargs='?', default='/')
parser_ls.set_defaults(func=ls)

parser_mkdir = subparsers.add_parser('mkdir', help='Create a new folder',
                                     description='Create a new folder')
parser_mkdir.add_argument('-p', '--parents', help='no error if existing, create parent directories as needed', action='store_true')
parser_mkdir.add_argument('folder', help='folder to create; full path is required')
parser_mkdir.set_defaults(func=mkdir)

parser_rmdir = subparsers.add_parser('rmdir', help='Remove a folder',
                                     description='Remove a folder')
parser_rmdir.add_argument('folder', help='folder to remove; full path is required')
parser_rmdir.set_defaults(func=rmdir)

parser_rm = subparsers.add_parser('rm', help='Remove objects',
                                  description='Remove objects')
parser_rm.add_argument('objects', help='object IDs to remove', nargs='+')
parser_rm.set_defaults(func=rm)

parser_file = subparsers.add_parser('file', help='Interact with remote files')
subparsers_file = parser_file.add_subparsers()

parser_file_get = subparsers_file.add_parser('get', help='Download a file')
parser_file_get.add_argument('dxid', help='file ID to download')
parser_file_get.add_argument('-o', '--output', help='local filename to be saved; if not supplied, the remote file\'s name or ID will be used')
parser_file_get.set_defaults(func=file_get)

parser_file_put = subparsers_file.add_parser('put', help='Upload a file')
parser_file_put.add_argument('filename', help='local filename to upload')
parser_file_put.set_defaults(func=file_put)

parser_set = subparsers.add_parser('set', help='Sets default values for communication with the API server',
                                   description='Sets default values for communication with the API server')
subparsers_set = parser_set.add_subparsers()

parser_set_host = subparsers_set.add_parser('host', help='Sets the API server hostname')
parser_set_host.add_argument('host', help='API server hostname')
parser_set_host.set_defaults(func=set_host)

parser_set_port = subparsers_set.add_parser('port', help='Sets the API server port number')
parser_set_port.add_argument('port', help='API server port number')
parser_set_port.set_defaults(func=set_port)

parser_set_project = subparsers_set.add_parser('project', help='Sets the default project ID')
parser_set_project.add_argument('project', help='Project ID')
parser_set_project.set_defaults(func=set_project)

parser_describe = subparsers.add_parser('describe', help='Describe a remote object', description='Describe a remote object')
parser_describe.add_argument('--project', help='Specify hint for which project to access, default is default project')
parser_describe.add_argument('--properties', help='Include properties', action='store_true')
parser_describe.add_argument('--details', help='Include details if available', action='store_true')
parser_describe.add_argument('--json', help='Display return value in JSON', action='store_true')
parser_describe.add_argument('dxid', help='Object ID to describe')
parser_describe.set_defaults(func=describe)

parser_find = subparsers.add_parser('find', help='Search functionality over data objects, projects, and jobs',
                                    description='Search functionality over data objects, projects, and jobs')
subparsers_find = parser_find.add_subparsers()

parser_find_jobs = subparsers_find.add_parser('host', help='Finds jobs')
parser_find_jobs.add_argument('--user', help='User ID who launched the job')
parser_find_jobs.add_argument('--program', help='Program ID that job is running')
parser_find_jobs.add_argument('--project', help='Project context ID (output project)')
parser_find_jobs.add_argument('--state', help='State of the job, e.g. \"done\", \"failed\"')
parser_find_jobs.add_argument('--origin', help='Job ID of the top-level (user-initiated) job')
parser_find_jobs.add_argument('--parent', help='Job ID of the parent job')
parser_find_jobs.add_argument('--describe', help='Return description of job with result', action='store_true')

parser_find_jobs.set_defaults(func=find_jobs)

args = parser.parse_args(sys.argv[1:])
args.func(args)
