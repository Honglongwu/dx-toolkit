#!/usr/bin/env python

import os, sys, json, re, time
from optparse import OptionParser
import dxpy
from ws4py.client.threadedclient import WebSocketClient

parser = OptionParser(usage="%prog [options] job_id", description="Watch logging messages from a DNAnexus job and its subjobs")
parser.add_option("--no_recurse", help="Do not watch messages from subjobs", default=False)
parser.add_option("-n", "--num_recent_messages", help="Number of recent messages from the job to display", type="int", default=999999999)
(opts, args) = parser.parse_args()

if len(args) != 1:
    parser.print_help()
    parser.error("Incorrect number of arguments")

job_id = args[0]

class DXJobLogStreamClient(WebSocketClient):
    def opened(self):
        self.send('5:1::' + json.dumps({"name": "streamingId", "args": [streaming_id]}))

    def closed(self, code, reason):
        print "Log socket closed:", code, reason

    def received_message(self, message):
        if not re.match("^([^:]+):([^:]*):([^:]*):(.+)", str(message)):
            return

        msg_type, msg_id, msg_endpoint, msg_data = re.match("^([^:]+):([^:]*):([^:]*):(.+)", str(message)).groups()
        if msg_type != '5':
            return
        try:
            msg_content = json.loads(msg_data)
        except:
            print "Error while decoding message:", str(msg_content)
        if (msg_content["name"] == "log"):
            print msg_content["args"][0]

try:
    streaming_id = dxpy.api.jobStreamLog(job_id, {"numRecentMessages": opts.num_recent_messages, "recurseJobs": not opts.no_recurse})['streamingId']
    response = dxpy.DXHTTPRequest('/socket.io/1/', '', jsonify_data=False, want_full_response=True)
    hskey = response.content.split(':')[0]
    ws = DXJobLogStreamClient(dxpy.APISERVER + '/socket.io/1/websocket/' + hskey)

    print "Watching job %s%s. Press Ctrl+C to stop." % (job_id, ("" if opts.no_recurse else " and sub-jobs"))
    ws.connect()
    while not ws.terminated:
        # See also https://dnanexus.jira.com/browse/PTFM-2692
        time.sleep(5)
except KeyboardInterrupt:
    ws.close()
