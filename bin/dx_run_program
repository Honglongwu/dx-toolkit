#!/usr/bin/env python

import logging
logging.basicConfig(level=logging.DEBUG)

import os, sys, json
from optparse import OptionParser
import dxpy
from dxpy.exceptions import DXJobFailureError

parser = OptionParser(usage="%prog program_name [options]", description="Run a DNAnexus program. Example: %prog my_program -iparam1=value1 -iparam2=value2")
parser.add_option("-i", "--input", help="Program input parameter", action='append')
parser.add_option("-w", "--wait", help="Wait for the launched job to complete, exit with code 1 if job fails", action='store_true')
(opts, args) = parser.parse_args()

if len(args) != 1:
    parser.print_help()
    parser.error("Incorrect number of arguments")

program_name = args[0]

if program_name[:4] == 'program-':
    program_id = program_name
else:
    # TODO: this only works in the default debug project
    program_id = dxpy.find_data_objects(classname="program", properties={"name": program_name}, project=dxpy.WORKSPACE_ID).next()['objectId']
    print program_id

program_input = {}
for i in opts.input:
    name, value = i.split("=")
    try:
        program_input[name] = json.loads(value)
    except ValueError:
        program_input[name] = value

job = dxpy.DXProgram(program_id).run(program_input)

logging.info("Launched job "+job.get_id())

if opts.wait:
    logging.info("Waiting for job to complete...")
    try:
        job.wait_on_done()
        print json.dumps(job.describe()["output"])
    except DXJobFailureError as e:
        logging.error("Job did not complete successfully: %s" % e.message)
        sys.exit(1)
