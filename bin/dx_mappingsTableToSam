#!/usr/bin/env python

import dxpy
import math
from optparse import OptionParser
import re

#Usage: sample input: dx_MappingsTableToSamBwa --table_id <gtable_id> --output <filename>
#Example: dx_MappingsTableToSamBwa --table_id gtable-9yZvF200000PYKJyV4k00005 --output mappings.sam

def main():

    parser = OptionParser("Usage: % mappings_id file_name")
    parser.add_option("--table_id", dest="mappings_id", help="Mappings table id to read from")
    parser.add_option("--output", dest="file_name", help="Name of file to write SAM to")
    parser.add_option("--region_index_offset", dest="region_index_offset", type = "int", default = 0, help="Adjust regions by this amount. Useful for converting between zero and one indexed lists")
    parser.add_option("--region", "-L", "-l", dest="region", type="string",  action="append", help="Regions to extract mappings for, in the format ChrX:A-B")
    (opts, args) = parser.parse_args()

    
    mappingsTable = dxpy.open_dxgtable(opts.mappings_id)
    
    try:
        originalContig = mappingsTable.get_details()['original_contigset']
    except:
        raise Exception("The original reference genome must be attached as a detail")
    
    contigDetails = dxpy.DXRecord(originalContig).get_details()['contigs']
    contigNames = contigDetails['names']
    contigSizes = contigDetails['sizes']
    
    outputFile = open(opts.file_name, 'w')
    
    for i in range(len(contigNames)):
        outputFile.write("@SQ\tSN:"+contigNames[i]+"\tLN:"+str(contigSizes[i])+"\n")

    col = {}
    names = mappingsTable.get_col_names()   
    for i in range(len(names)):
        col[names[i]] = i+1
        
    if opts.region == None:  
        for row in mappingsTable.iterate_rows():
            writeRow(row, col, outputFile)
            
    else:
        for region in opts.region:
            includeDictionary = {}
            intervalMatch = re.findall("(\w+):(\d+)-(\d+)", region)
            query = mappingsTable.genomic_range_query(intervalMatch[0][0],int(intervalMatch[0][1])+opts.region_index_offset,int(intervalMatch[0][2])+opts.region_index_offset,mode='overlap',index='gri')
            for row in mappingsTable.iterate_query_rows(query=query):
                writeRow(row, col, outputFile)
        

def writeRow(row, col, outputFile):
    flag = 0x1*(row[col["mate_id"]] >= -1 and row[col["mate_id"]] <= 1) + 0x2*(row[col["proper_pair"]] == True) + 0x4*(row[col["status"]] == "UNMAPPED")
    flag += 0x8*(row[col["status2"]] == "UNMAPPED") + 0x10*(row[col["negative_strand"]] == True) + 0x20*(row[col["negative_strand2"]] == True)
    flag += 0x40*(row[col["mate_id"]] == 0) + 0x80*(row[col["mate_id"]] == 1) + 0x100*(row[col["status"]] == "SECONDARY")
    flag += 0x200*(row[col["qc"]] == "not passing quality controls") + 0x400*(row[col["qc"]] == "PCR or optical duplicate")
    flag += (0x200+0x400)*(row[col["qc"]] == "both not qc and PCR or optical duplicate")
    
    chromosome = row[col["chr"]]
    if row[col["chr"]] == "":
        chromosome = "*"
    readName = row[col["name"]]
    if readName.strip("@") == "":
        readName = "*"
    orientation = 1
    if row[col["negative_strand"]]:
        orientation = -1
    if row[col["mate_id"]] == -1 or row[col["chr"]] != row[col["chr2"]]:
        tlen = 0
    else:
        tlen = str((max(int(row[col["hi2"]]),int(row[col["hi"]])) - min(int(row[col["lo2"]]),int(row[col["lo"]])))*(1-2*row[col["mate_id"]]))
    
    outputFile.write(readName.strip("@") + "\t" + str(flag) + "\t" + chromosome + "\t" + str(row[col["lo"]]+1) + "\t")
    outputFile.write(str(row[col["error_probability"]]) + "\t" + row[col["cigar"]] + "\t" + row[col["chr2"]] + "\t")
    outputFile.write(str(row[col["lo2"]]+1) + "\t" + tlen + "\t" + row[col["sequence"]][::orientation] + "\t")
    outputFile.write(str(row[col["quality"]][::orientation] + "\n"))

main()