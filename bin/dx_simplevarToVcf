#!/usr/bin/env python

import dxpy
import math
from optparse import OptionParser


#Usage: sample input: dx_Simplevar2Vcf
def main():

    parser = OptionParser("Usage: %prog table_id output quality_filter")
    parser.add_option("--table_id", dest="simplevar_id", help="Simplevar table id to read from")
    parser.add_option("--output", dest="file_name", help="Name of file to write VCF to")
    parser.add_option("--quality_filter", dest="filter", default=0, help="What quality score filter to apply")
    #parser.add_option("--include_ref", dest="include_ref", help="Write reference call rows to VCF")
    #parser.add_option("--include_no_call", dest="include_no_call", help="Write no-call rows to VCF")
    
    (opts, args) = parser.parse_args()
    outputFile = open(opts.file_name, 'w')
    
    simplevarTable = dxpy.open_dxgtable(opts.simplevar_id)
    
    try:
        originalContigSet = simplevarTable.get_details()['originalContigSet']
    except:
        raise Exception("The original reference genome must be attached as a detail")
        
    contigDetails = dxpy.DXRecord(originalContigSet).get_details()
    dxpy.download_dxfile(contigDetails['flat_sequence_file']['$dnanexus_link'], 'ref.txt')
    
    header = simplevarTable.get_details()['header']
    outputFile.write(header)
    
    chromosomeOffsets = {}
    for i in range(len(contigDetails['contigs']['names'])):
        chromosomeOffsets[contigDetails['contigs']['names'][i]] = contigDetails['contigs']['offsets'][i]

    contigSequence = open("ref.txt",'r').read()
    
    col = {}
    names = simplevarTable.get_col_names()   
    for i in range(len(names)):
        col[names[i]] = i+1
    
    #refAppearsCompressed = False
    #noCallAppearsCompressed = False
    
    for x in simplevarTable.iterate_rows():
        chr = str(x[col["chr"]])
        pos = str(x[col["lo"]]-1)
        ref = str(x[col["ref"]])
        if (x[col["type"]]) == "Ins" or (x[col["type"]]) == "Del" or (x[col["type"]]) == "Complex" or (x[col["type"]]) == "Mixed":
            ref = contigSequence[chromosomeOffsets[chr]+int(pos)-1]+ref
        altOptions = x[col["alt"]].split("/")
        qual = str(x[col["qual"]])
        filter = "."
        vcfAlt = x[col["vcf_alt"]]
        vcfAdditional = x[col["vcf_additional_data"]]
        if x[3] != "Ref" and x[3] != "No-call" and qual < int(opts.filter):
            filter = "q"+str(opts.filter)
            
        outputFile.write(chr+"\t"+pos+"\t.\t"+ref+"\t"+vcfAlt+"\t"+qual+"\t"+filter+"\t"+vcfAdditional+"\n")
        
        
main()