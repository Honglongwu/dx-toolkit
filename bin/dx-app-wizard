#!/usr/bin/env python

import sys, os
import json
import argparse
from dxpy.templating import *
from dxpy.utils.printing import *
from collections import OrderedDict

API_VERSION = '1.0.0'

manifest = []

parser = argparse.ArgumentParser(description="Create a source code directory for a DNAnexus app.  You will be prompted for various metadata for the app as well as for its input and output specifications.")
parser.add_argument('--debugfile', help='Generate the code file based on the IO spec found in the file')
parser.add_argument('--debuglang', help='Language to test with')
args = parser.parse_args()

if args.debugfile is not None:
    if args.debuglang is None:
        parser.exit(1, 'If --debugfile is provided, so must --debuglang\n')
    with open(args.debugfile, 'r') as debug_file:
        app_json = json.loads(debug_file.read())
        template_dir = os.path.join(os.environ.get('DNANEXUS_HOME'), 'doc', 'example-templates', language_options[args.debuglang].get_path(), 'basic')
        try:
            os.mkdir(app_json['name'])
        except:
            pass
        try:
            os.mkdir(os.path.join(app_json['name'], 'src'))
        except:
            pass
        try:
            os.mkdir(os.path.join(app_json['name'], 'test'))
        except:
            pass
        try:
            os.mkdir(os.path.join(app_json['name'], 'resources'))
        except:
            pass
        create_files_from_templates(template_dir, app_json, args.debuglang, ['dummyfilevar', 'filevar2'])
    parser.exit(0)

template_dir = os.environ.get('DNANEXUS_HOME', None)
if not isinstance(template_dir, basestring):
    sys.stderr.write(fill('''Error: Environment variable DNANEXUS_HOME is not set; cannot find code templates''') + '\n')
    exit(1)

print_intro(API_VERSION)

##################
# BASIC METADATA #
##################

name = get_name()

try:
    os.mkdir(name)
except:
    sys.stderr.write(fill('''Unable to create a directory for %s, please check that it is a valid app name and the working directory exists and is writable.''' % name) + '\n')
    sys.exit(1)

title, summary, description, version = get_metadata(API_VERSION)

app_json = OrderedDict()
app_json["name"] = name

if title != '':
    app_json["title"] = title
if summary != '':
    app_json['summary'] = summary
if description != '':
    app_json['description'] = description

app_json["dxapi"] = API_VERSION
app_json["runSpec"] = OrderedDict({"interpreter": interpreter})
app_json["version"] = version
app_json["details"] = OrderedDict({"contactUrl": "http://wiki.dnanexus.com/Apps/" + name})
app_json["resources"] = []

############
# IO SPECS #
############

class_completer = Completer(['int', 'float', 'string', 'boolean', 'hash',
                             'array:int', 'array:float', 'array:string', 'array:boolean', 'array:hash',
                             'record', 'file', 'gtable', 'table', 'applet',
                             'array:record', 'array:file', 'array:gtable', 'array:table', 'array:applet'])
bool_completer = Completer(['true', 'false'])

print ''
print BOLD() + 'Input Specification' + ENDC()
print ''
print fill('Specifying the inputs is optional for applets, but required for apps.')
print ''

input_spec = prompt_for_yn('Specify inputs', True)
input_names = []
file_input_names = []
gtable_input_names = []
gtable_output_names = []
if input_spec:
    app_json['inputSpec'] = []
    print ''
    print fill('You will now be prompted for each input parameter to your app.  Each parameter should have a unique name that is valid as a variable name in your programming language of choice.')

    while True:
        print ''
        input_name = prompt_for_var('Variable name (leave empty to finish entering input parameters)', allow_empty=True)
        if input_name in input_names:
            print fill('Error: Cannot use the same input variable name twice.  Please choose again.')
            continue
        else:
            input_names.append(input_name)
        if input_name == '':
            break
        input_label = prompt_for_var('Label (if supplied, replaces the variable name in the UI)', '')

        use_completer(class_completer)
        print 'Your input variable must be of one of the following classes:'
        print '''array:boolean  array:hash     array:string   float          applet
array:file     array:int      array:table    gtable         record
array:float    array:applet   boolean        hash           string
array:gtable   array:record   file           int            table
'''

        while True:
            input_class = prompt_for_var('Choose a class')
            if input_class in class_completer.choices:
                if input_class == 'file':
                    file_input_names.append(input_name)
                elif input_class == 'gtable':
                    gtable_input_names.append(input_name)
                break
            else:
                print fill('Not a recognized class; please choose again.')

        use_completer()

        optional = prompt_for_yn('This is an optional parameter')

        default_val = None
        if optional and input_class in ['int', 'float', 'string', 'boolean']:
            default_val = prompt_for_yn('A default value should be provided')
            if default_val:
                while True:
                    if input_class == 'boolean':
                        use_completer(bool_completer)
                        default_val = prompt_for_var('  Default value', choices=['true', 'false'])
                        use_completer()
                    else:
                        default_val = prompt_for_var('  Default value')

                    try:
                        if input_class == 'boolean':
                            default_val = (default_val == 'true')
                        elif input_class == 'int':
                            default_val = int(default_val)
                        elif input_class == 'float':
                            default_val = float(default_val)
                        break
                    except:
                        print 'Not a valid default value for the given class ' + input_class
            else:
                default_val = None

        # Fill in the input parameter's JSON
        parameter_json = {
            "name": input_name,
            "class": input_class,
            "optional": optional
            }
        if input_label != '':
            parameter_json['label'] = input_label
        if default_val is not None:
            parameter_json['default'] = default_val
        app_json['inputSpec'].append(parameter_json)

print ''
print BOLD() + 'Output Specification' + ENDC()
print ''
print fill('Specifying the outputs is optional for applets, but required for apps.')
print ''

output_spec = prompt_for_yn('Specify outputs', True)
output_names = []
if output_spec:
    app_json['outputSpec'] = []
    print ''
    print fill('You will now be prompted for each output parameter of your app.')

    while True:
        print ''
        output_name = prompt_for_var('Variable name (leave empty to finish entering output parameters)', allow_empty=True)
        if output_name in output_names:
            print fill('Error: Cannot use the same input variable name twice.  Please choose again.')
            continue
        else:
            output_names.append(output_name)
        if output_name == '':
            break
        output_label = prompt_for_var('Label (optional)', '')

        use_completer(class_completer)
        print 'Your input variable must be of one of the following classes:'
        print '''array:boolean  array:hash     array:string   float          applet
array:file     array:int      array:table    gtable         record
array:float    array:applet   boolean        hash           string
array:gtable   array:record   file           int            table
'''
        while True:
            output_class = prompt_for_var('Choose a class')
            if output_class in class_completer.choices:
                if output_class == 'gtable':
                    gtable_output_names.append(output_name)
                break
            else:
                print fill('Not a recognized class; please choose again.')

        use_completer()

        # Fill in the output parameter's JSON
        parameter_json = {
            "name": output_name,
            "class": output_class
            }
        app_json['outputSpec'].append(parameter_json)

########################
# LANGUAGE AND PATTERN #
########################

language = get_language()

interpreter = language_options[language].get_interpreter()

# Maybe at this time, prompt for what kind of app skeleton they want
# (for now, only providing basic):
#
# Basic: Skeleton for a basic app which runs on only one machine
#
# Parallelized: Skeleton for an app that will parallelize across
# multiple machines in the cloud.  It will have two additional entry
# points: "solve_subproblem" which will be called to run on a subset
# of the input, and "merge" for performing any necessary aggregation
# of the results.

pattern = get_pattern()

subpattern = None
if pattern == 'parallelized':
    input_field, output_field = get_parallelized_io(file_input_names,
                                                    gtable_input_names,
                                                    gtable_output_names)

template_dir = os.path.join(template_dir, 'doc', 'example-templates', language_options[language].get_path(), pattern)

with open(os.path.join(template_dir, 'dxapp.json'), 'r') as template_app_json_file:
    file_text = fill_in_name_and_ver(template_app_json_file.read(), name, version)
    template_app_json = json.loads(file_text)
    for key in template_app_json['runSpec']:
        app_json['runSpec'][key] = template_app_json['runSpec'][key]

#################
# WRITING FILES #
#################

print ''
print BOLD() + '*** Generating ' + DNANEXUS_LOGO() + BOLD() + ' App... ***' + ENDC()

with open(os.path.join(name, 'dxapp.json'), 'w') as prog_file:
    prog_file.write(clean(json.dumps(app_json, indent=2)) + '\n')
manifest.append(os.path.join(name, 'dxapp.json'))

print ''
print fill('''Your app specification has been written to the
dxapp.json file. You can specify more app options by editing this file
directly (see http://wiki.dnanexus.com/Developer-Portal for complete
documentation).''' + ('''  Note that without an input and output specification,
your app can only be built as an APPLET on the system.  To publish it to
the DNAnexus community, you must first specify your inputs and outputs.
''' if not (input_spec and output_spec) else ""))
print ''

for subdir in 'src', 'test', 'resources':
    try:
        os.mkdir(os.path.join(name, subdir))
        manifest.append(os.path.join(name, subdir, ''))
    except:
        sys.stderr.write("Unable to create subdirectory %s/%s" % (name, subdir))
        sys.exit(1)

manifest += create_files_from_templates(template_dir, app_json, language, file_input_names)

print "Created files:"
for filename in sorted(manifest):
    print "\t", filename
print fill('''App directory created! See http://wiki.dnanexus.com/Building-Your-First-DNAnexus-App for
next steps, or run "dx-build-app %s".''' % name)
