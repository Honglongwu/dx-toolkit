#!/usr/bin/env python

import os, sys, json, logging
logging.basicConfig(level=logging.DEBUG)

from optparse import OptionParser
import dxpy

parser = OptionParser(usage="%prog (input.fastq|dxfile-id) [options]", description="Upload a FASTQ file (local or DNAnexus DXFile) into a reads table")
parser.add_option("-w", "--wait", help="Wait for the resulting table to close", default=False, action='store_true')
(opts, args) = parser.parse_args()

if len(args) != 1:
    parser.print_help()
    parser.error("Incorrect number of arguments")

filename = args[0]

fastq_fh = open(filename) if os.path.exists(filename) else dxpy.open_dxfile(filename)

fastq_columns = [{"name": "id", "type": "string"},
                 {"name": "sequence", "type": "string"},
                 {"name": "quality", "type": "string"}]

with dxpy.new_dxgtable(columns=fastq_columns) as dxtable:
    i = 0
    fq_line, table_rows = [], []
    for line in fastq_fh:
        if i % 4 != 2: # skip quality header (third line in every 4-line block)
            fq_line.append(line.rstrip("\n"))
        i += 1
        if i % 4 == 0:
            table_rows.append(fq_line)
            fq_line = []
        if i % 40000 == 0:
            dxtable.add_rows(table_rows)
            table_rows = []
    if len(table_rows) > 0:
        dxtable.add_rows(table_rows)
    print json.dumps({'table_id': dxtable.get_id()})

if opts.wait:
    logging.info("Waiting for table %s to close..." % dxtable.get_id())
    dxtable.wait_on_close()
