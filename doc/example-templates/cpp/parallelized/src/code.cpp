/*
 * DX_APP_WIZARD_NAME DX_APP_WIZARD_VERSION
 * Generated by dx-app-wizard.
 *
 * Parallelized execution pattern: Your app will generate multiple
 * jobs to perform some computation in parallel, followed by a final
 * "postprocess" stage that will perform any additional computations
 * as necessary.
 *
 * See http://wiki.dnanexus.com/Building-Apps-in-cpp for more details about writing C++ apps.
 *
 * By default, this template uses the DNAnexus C++ JSON library and
 * the C++ bindings.
 */

// TODO: Actually parallelize this

#include <iostream>
#include <vector>
#include <stdint.h>

#include "dxjson/dxjson.h"
#include "dxcpp/dxcpp.h"

using namespace std;
using namespace dx;

// TODO: Consider putting the following two functions (or something
// similar) into the dxcpp bindings.  Also, maybe a function to report
// an AppError or AppInternalError in the bindings.
void getInput(JSON &input) {
  ifstream ifs("job_input.json");
  input.read(ifs);
}

void writeOutput(const JSON &output) {
  ofstream ofs("job_output.json");
  ofs << output.toString();
  ofs.close();
}

void postprocess() {
  JSON input;
  getInput(input);

  JSON output;
  writeOutput(output);
}

void process() {
  JSON input;
  getInput(input);

  JSON output;
  writeOutput(output);
}

int main(int argc, char *argv[]) {
  if (argc > 1) {
    switch (argv[1]) {
    case "process":
      process();
      break;
    case "postprocess":
      postprocess();
      break;
    default:
      return 1;
    }
    return 0;
  }

  JSON input;
  getInput(input);

  // The variable *input* should now contain the input fields given to
  // the app(let), with keys equal to the input field names.
  //
  // For example, if an input field is of name "num" and class "int",
  // you can obtain the value via:
  //
  // int num = input["num"].get<int>();
  //
  // See http://wiki.dnanexus.com/dxjson for more details on how to
  // use the C++ JSON library.
  DX_APP_WIZARD_INITIALIZE_INPUT
  DX_APP_WIZARD_DOWNLOAD_ANY_FILES
  // Fill in your application code here.  Dummy output provided below.

  JSON output = JSON(JSON_HASH);
  DX_APP_WIZARD_OUTPUT

  writeOutput(output);

  return 0;
}
