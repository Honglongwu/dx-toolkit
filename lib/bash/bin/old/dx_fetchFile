#!/usr/bin/env v8cgi

var process = require('process');
var assert = require('assert');
/** Usage : dx_fetchFile <File_ID> [chunk_size]
    Description: Prints the content of file to stdout.
    chunk_size : Number of bytes to get in each HTTP call
*/
var security_context = system.env.SECURITY_CONTEXT;
if (security_context === undefined) {
  system.stderr("ERROR: SECURITY_CONTEXT environment variable not set");
  throw new Error("throwing error from dx_fetchFile: because exit(1) does not work in v8cgi");
}

security_context = JSON.parse(security_context);
var apiserverHost = (system.env.APISERVER_HOST === undefined) ? "127.0.0.1" : system.env.APISERVER_HOST;
var apiserverPort = (system.env.APISERVER_PORT === undefined) ? "8124" : system.env.APISERVER_PORT;

var apiserverPath = apiserverHost + ":" + apiserverPort;

function main() {
  if(system.args.length < 2 || system.args.length > 3) {
    system.stderr.writeLine("Usage:");
    system.stderr.writeLine("dx_fetchFile <File_ID> [chunk_size]");
    system.stderr.writeLine("\nchunk_size = Number of bytes to be fetched in a single HTTP request (default: 2MB)");
    throw new Error("throwing error from dx_fetchFile: because exit(1) does not work in v8cgi");
  } 
  var CHUNK_SIZE = 2 * 1024 * 1024; // Default is 2 MB
  
  if(system.args.length == 3) {
    CHUNK_SIZE = parseInt(system.args[2], 10);
  }
  
  // var MAX_RETRY = 10; // Maximum number of retries to fetch a particular range.
  var id = parseInt(system.args[1], 10);
  var header = "Authorization: " + security_context.auth_token_type + " " + security_context.auth_token;

  var p = new process.Process();
  var cmd = "curl -s -S -X GET -H '" + header + "' " + apiserverPath + "/files/" + id + "/meta";
  var resp = p.exec(cmd);
  delete p;
  var fileSize = JSON.parse(resp).size;
  var numChunks = Math.ceil(fileSize / CHUNK_SIZE);
  var range;

  for(i = 0; i < numChunks ; ++i) {
    var lowByte = i * CHUNK_SIZE;
    var highByte = Math.min((i + 1)*CHUNK_SIZE - 1, fileSize - 1);
    
    // In Range header, both bytes are inclusive, so Range: 0-3, fetches 4 bytes.
    //var totalBytes = highByte - lowByte + 1; // Will always be CHUNK_SIZE except possibly for last fetch 
    range = lowByte + "-" + highByte;
    var p = new process.Process();
    cmd = "curl -s -S -X GET -H '" + header + "' -r '" + range + "' " + apiserverPath + "/files/" + id;
    var curlout = p.system(cmd);
    delete p;
  }
  system.stdout.flush(); // Write any remaining data
}
main(); // Call main (entry point for this program)
