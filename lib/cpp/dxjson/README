dxjson 1.0 - JSON parser for C++

**************
Installation:
**************
  In directory dxjson/, run this command
  
    $ sudo make_standard_lib.sh
  
  This will build a static library (libdxjson.a) and copy it to /usr/local/lib . Header files will be copied to /usr/local/include/dxjson/

***************
Running tests
***************
  We use google-test framework for testing dxjson. Once you run "make_standard_lib.sh", an executable with name: "test" (without quotes) is created in the current directory.

  You can run test by simply running this file as follows:
    $ ./test

  NOTE: You must have google-test framework installed for tests to work: http://googletest.googlecode.com/files/gtest-1.5.0.tar.gz

*******************************
Example Program & Compilation:
*******************************
  //////////////// Example program (filename: helloworld.cpp) /////////////////
  #include <dxjson/dxjson.h>
  #include <iostream>
  using namespace dx;

  int main() {
    JSON j(JSON_OBJECT);
    j["hello"] = "world";
    std::cout<<"Contents of json j = "<<j.toString()<<std::endl;
    return 0;
  }
  //////////////////////////////////////////////////

  Compile the program this way
    $ g++ -Wall helloworld.cpp -ldxjson -o helloworld.o

  On running ./helloworld.o, following output should be shown:
    
    Contents of json j = {"hello": "world"}
  
  
  You can look at example_usage.cpp and gtest_json.cpp file in top level directory for more example usage.

*************************
Documentation generation
*************************
  In top-level directory run this command (NOTE: You must have Doxygen installed on your system)
    $ doxygen doxygen.config

  This will generate documentation in ./doxygen/html. You can start looking at documentation by opening ./doxygen/html/index.html in a browser.

- EOF -

