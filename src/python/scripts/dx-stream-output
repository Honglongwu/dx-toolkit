#!/usr/bin/env python
#
# Copyright (C) 2014 DNAnexus, Inc.
#
# This file is part of dx-toolkit (DNAnexus platform client libraries).
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
#   use this file except in compliance with the License. You may obtain a copy
#   of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.

import os
import sys
import json
import argparse
import dxpy
from dxpy.compat import (USING_PYTHON2, basestring, str, input, wrap_stdio_in_codecs)
from dxpy.utils import file_load_utils

parser = argparse.ArgumentParser(description='Streams standard input to a file in the workspace.')
parser.add_argument('key', help='Key from input specification')
parser.add_argument('filename', help='file name in the job workspace')
args = parser.parse_args()

wrap_stdio_in_codecs()

def stream_out(path):
    '''stream stdin to a file in the workspace.

    :param data: full path of target file in the workspace
    :type data: string
    :returns: Remote file handler
    :rtype: :class:`~dxpy.bindings.dxfile.DXFile`
    '''
    basename = os.path.basename(path)
    dirname = os.path.dirname(path)
    trg_folder = ("/" if dirname == '' else dirname)
    if trg_folder[0] != "/":
        trg_folder += "/"

    try:
        dxfile = dxpy.upload_local_file(file=sys.stdin.buffer,
                                        name=basename,
                                        folder=trg_folder,
                                        parents=True)
        return dxfile
    except:
        file_load_utils.report_error_and_exit("Error streaming file {}".format(dxfile_id))


# make sure the key has file type
output_spec = file_load_utils.get_output_spec()
if output_spec is None:
        file_load_utils.report_error_and_exit(
            'This app does not have an output specification, please add it to dxapp.json')
if args.key not in output_spec:
    file_load_utils.report_error_and_exit(
        'Unable to find key {} in the job output specification, make sure dxapp.json includes it'.format(args.key))
if output_spec[args.key]['class'] != 'file':
    file_load_utils.report_error_and_exit(
        'Key {} must have type file, it has type {} instead'.format(args.key, output_spec[args.key]['class']))

dx_file = stream_out(args.filename)
dx_link = dxpy.dxlink(dx_file.get_id(),
                      project_id= dx_file.get_proj_id())

# TODO: add a lock around the json output file
subdir_recs = {}
subdir_recs[args.key] = {'dx_links': [dx_link], 'class': 'file'}
file_load_utils.update_output_json(subdir_recs)
