#******************************************************************************\
#* Copyright (c) 2003-2004, Martin Blais
#* All rights reserved.
#*
#* Redistribution and use in source and binary forms, with or without
#* modification, are permitted provided that the following conditions are
#* met:
#*
#* * Redistributions of source code must retain the above copyright
#*   notice, this list of conditions and the following disclaimer.
#*
#* * Redistributions in binary form must reproduce the above copyright
#*   notice, this list of conditions and the following disclaimer in the
#*   documentation and/or other materials provided with the distribution.
#*
#* * Neither the name of the Martin Blais, Furius, nor the names of its
#*   contributors may be used to endorse or promote products derived from
#*   this software without specific prior written permission.
#*
#* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#******************************************************************************\

"""Automatic completion for optparse module.

This module provide automatic bash completion support for programs that use the
optparse module.  The premise is that the optparse options parser specifies
enough information (and more) for us to be able to generate completion strings
esily.  Another advantage of this over traditional completion schemes where the
completion strings are hard-coded in a separate bash source file, is that the
same code that parses the options is used to generate the completions, so the
completions is always up-to-date with the program itself.

In addition, we allow you specify a list of regular expressions or code that
define what kinds of files should be proposed as completions to this file if
needed.  If you want to implement more complex behaviour, you can instead
specify a function, which will be called with the current directory as an
argument.

You need to activate bash completion using the shell script function that comes
with optcomplete (see http://furius.ca/optcomplete for more details).

"""

__version__ = "$Revision$"
__author__ = "Martin Blais <blais@furius.ca>"

## Bash Protocol Description
## -------------------------
##
## `COMP_CWORD'
##      An index into `${COMP_WORDS}' of the word containing the current
##      cursor position.  This variable is available only in shell
##      functions invoked by the programmable completion facilities (*note
##      Programmable Completion::).
##
## `COMP_LINE'
##      The current command line.  This variable is available only in
##      shell functions and external commands invoked by the programmable
##      completion facilities (*note Programmable Completion::).
##
## `COMP_POINT'
##      The index of the current cursor position relative to the beginning
##      of the current command.  If the current cursor position is at the
##      end of the current command, the value of this variable is equal to
##      `${#COMP_LINE}'.  This variable is available only in shell
##      functions and external commands invoked by the programmable
##      completion facilities (*note Programmable Completion::).
##
## `COMP_WORDS'
##      An array variable consisting of the individual words in the
##      current command line.  This variable is available only in shell
##      functions invoked by the programmable completion facilities (*note
##      Programmable Completion::).
##
## `COMPREPLY'
##      An array variable from which Bash reads the possible completions
##      generated by a shell function invoked by the programmable
##      completion facility (*note Programmable Completion::).


import sys, os
from os.path import *
import types
import re
import argparse

from pprint import pprint, pformat


debugfn = None # for debugging only

class ListCompleter:

    """Completes by filtering using a fixed list of strings."""

    def __init__(self, stringlist):
        self.olist = stringlist

    def __call__(self, pwd, line, point, prefix, suffix):
        return self.olist

def extract_word(line, point):

    """Return a prefix and suffix of the enclosing word.  The character under
    the cursor is the first character of the suffix."""

    wsre = re.compile('[ \t]')

    if point < 0 or point > len(line):
        return '', ''

    preii = point - 1
    while preii >= 0:
        if wsre.match(line[preii]):
            break
        preii -= 1
    preii += 1

    sufii = point
    while sufii < len(line):
        if wsre.match(line[sufii]):
            break
        sufii += 1

    return line[preii : point], line[point : sufii]

def autocomplete(parser,
                 arg_completer=None, # means use default.
                 subcommands=None):

    """Automatically detect if we are requested completing and if so generate
    completion automatically from given parser.

    'parser' is the options parser to use.

    'arg_completer' is a callable object that gets invoked to produce a list of
    completions for arguments completion (oftentimes files).

    'opt_completer' is the default completer to the options that require a
    value. 'subcmd_completer' is the default completer for the subcommand
    arguments.

    If 'subcommands' is specified, the script expects it to be a map of
    command-name to an object of any kind.  We are assuming that this object is
    a map from command name to a pair of (options parser, completer) for the
    command. If the value is not such a tuple, the method
    'autocomplete(completer)' is invoked on the resulting object.

    This will attempt to match the first non-option argument into a subcommand
    name and if so will use the local parser in the corresponding map entry's
    value.  This is used to implement completion for subcommand syntax and will
    not be needed in most cases."""

    # If we are not requested for complete, simply return silently, let the code
    # caller complete. This is the normal path of execution.
    if not os.environ.has_key('ARGPARSE_AUTO_COMPLETE'):
        return

    # By default, completion will be arguments completion, unless we find out
    # later we're trying to complete for an option.
    completer = arg_completer

    #
    # Completing...
    #

    # Fetching inputs... not sure if we're going to use these.
    ifs = os.environ.get('IFS')
    cwords = os.environ['COMP_WORDS'].split(ifs)
    cline = os.environ['COMP_LINE']
    cpoint = int(os.environ['COMP_POINT'])
    cword = int(os.environ['COMP_CWORD'])

#    sys.stderr.write(str(cwords))

    # If requested, try subcommand syntax to find an options parser for that
    # subcommand.
    if subcommands:
        assert isinstance(subcommands, types.DictType)
        if len(cwords) > 2 and cwords[1]+" "+cwords[2] in subcommands: # TODO: HACK
            parser = subcommands[cwords[1]+" "+cwords[2]][0]
            return autocomplete(parser, arg_completer=subcommands[cwords[1]+" "+cwords[2]][1])
        elif len(cwords) > 1 and cwords[1] in subcommands:
            parser = subcommands[cwords[1]][0]
            return autocomplete(parser, arg_completer=subcommands[cwords[1]][1])
        else:
            return autocomplete(parser)

    # Extract word enclosed word.
    prefix, suffix = extract_word(cline, cpoint)
#    sys.stderr.write(prefix)
    # The following would be less exact, but will work nonetheless .
    # prefix, suffix = cwords[cword], None
    
    completions = []

    # Subcommand and options completion.
    for action in parser._actions:
        if isinstance(action, argparse._SubParsersAction):
            completions += [subcmd for subcmd in action.choices.keys() if subcmd.startswith(prefix)]
        elif prefix and prefix.startswith('-'):
            completions += [option for option in action.option_strings if option.startswith(prefix)]

    # Argument completion.
    if completer and (not prefix or not prefix.startswith('-')):
        completions += completer.get_matches(cline, cpoint, prefix, suffix)

    # # Filter using prefix.
    # if prefix:
    #     completions = filter(lambda x: x.startswith(prefix), completions)

    # Print result.
    print ifs.join(completions)

    # Print debug output (if needed).  You can keep a shell with 'tail -f' to
    # the log file to monitor what is happening.
    if debugfn:
        f = open(debugfn, 'a')
        print >> f, '---------------------------------------------------------'
        print >> f, 'CWORDS', cwords
        print >> f, 'CLINE', cline
        print >> f, 'CPOINT', cpoint
        print >> f, 'CWORD', cword
        print >> f, '\nShort options'
        print >> f, pformat(parser._short_opt)
        print >> f, '\nLong options'
        print >> f, pformat(parser._long_opt)
        print >> f, 'Prefix/Suffix:', prefix, suffix
        print >> f, 'completions', completions
        f.close()

    # Exit with error code (we do not let the caller continue on purpose, this
    # is a run for completions only.)
    sys.exit(1)

def guess_first_nonoption(gparser, subcmds_map):

    """Given a global options parser, try to guess the first non-option without
    generating an exception. This is used for scripts that implement a
    subcommand syntax, so that we can generate the appropriate completions for
    the subcommand."""

    import copy
    gparser = copy.deepcopy(gparser)
    def print_usage_nousage (self, file=None):
        pass
    gparser.print_usage = print_usage_nousage

    prev_interspersed = gparser.allow_interspersed_args # save state to restore
    gparser.disable_interspersed_args()

    cwords = os.environ['COMP_WORDS'].split()

    try:
        gopts, args = gparser.parse_args(cwords[1:])
    except SystemExit:
        return None

    value = None
    if args:
        subcmdname = args[0]
        try:
            value = subcmds_map[subcmdname]
        except KeyError:
            pass

    gparser.allow_interspersed_args = prev_interspersed # restore state

    return value # can be None, indicates no command chosen.

def test():
    print extract_word("extraire un mot d'une phrase", 11)
    print extract_word("extraire un mot d'une phrase", 12)
    print extract_word("extraire un mot d'une phrase", 13)
    print extract_word("extraire un mot d'une phrase", 14)
    print extract_word("extraire un mot d'une phrase", 0)
    print extract_word("extraire un mot d'une phrase", 28)
    print extract_word("extraire un mot d'une phrase", 29)
    print extract_word("extraire un mot d'une phrase", -2)
    print extract_word("optcomplete-test do", 19)

if __name__ == '__main__':
    test()
